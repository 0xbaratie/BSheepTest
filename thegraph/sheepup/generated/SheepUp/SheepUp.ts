// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Sheepened extends ethereum.Event {
  get params(): Sheepened__Params {
    return new Sheepened__Params(this);
  }
}

export class Sheepened__Params {
  _event: Sheepened;

  constructor(event: Sheepened) {
    this._event = event;
  }

  get sheepId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get level(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shippedAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Shipped extends ethereum.Event {
  get params(): Shipped__Params {
    return new Shipped__Params(this);
  }
}

export class Shipped__Params {
  _event: Shipped;

  constructor(event: Shipped) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get level(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SheepUp__playerShipCountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCount(): BigInt {
    return this.value0;
  }

  getShippedAt(): BigInt {
    return this.value1;
  }
}

export class SheepUp__playerTapCountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCount(): BigInt {
    return this.value0;
  }

  getTappedAt(): BigInt {
    return this.value1;
  }
}

export class SheepUp__sheepStatusResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLevel(): BigInt {
    return this.value0;
  }

  getShippedAt(): BigInt {
    return this.value1;
  }
}

export class SheepUp extends ethereum.SmartContract {
  static bind(address: Address): SheepUp {
    return new SheepUp("SheepUp", address);
  }

  PLAYER_SHIP_COUNT_CAP(): BigInt {
    let result = super.call(
      "PLAYER_SHIP_COUNT_CAP",
      "PLAYER_SHIP_COUNT_CAP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PLAYER_SHIP_COUNT_CAP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PLAYER_SHIP_COUNT_CAP",
      "PLAYER_SHIP_COUNT_CAP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PLAYER_TAP_COUNT_CAP(): BigInt {
    let result = super.call(
      "PLAYER_TAP_COUNT_CAP",
      "PLAYER_TAP_COUNT_CAP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PLAYER_TAP_COUNT_CAP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PLAYER_TAP_COUNT_CAP",
      "PLAYER_TAP_COUNT_CAP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHIP_CAP(): BigInt {
    let result = super.call("SHIP_CAP", "SHIP_CAP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SHIP_CAP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SHIP_CAP", "SHIP_CAP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHIP_COUNT_RECOVER_SECOND(): BigInt {
    let result = super.call(
      "SHIP_COUNT_RECOVER_SECOND",
      "SHIP_COUNT_RECOVER_SECOND():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SHIP_COUNT_RECOVER_SECOND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SHIP_COUNT_RECOVER_SECOND",
      "SHIP_COUNT_RECOVER_SECOND():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TAP_COUNT_RECOVER_SECOND(): BigInt {
    let result = super.call(
      "TAP_COUNT_RECOVER_SECOND",
      "TAP_COUNT_RECOVER_SECOND():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TAP_COUNT_RECOVER_SECOND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TAP_COUNT_RECOVER_SECOND",
      "TAP_COUNT_RECOVER_SECOND():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPlayerShipStamina(_sender: Address): BigInt {
    let result = super.call(
      "getPlayerShipStamina",
      "getPlayerShipStamina(address):(uint256)",
      [ethereum.Value.fromAddress(_sender)]
    );

    return result[0].toBigInt();
  }

  try_getPlayerShipStamina(_sender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPlayerShipStamina",
      "getPlayerShipStamina(address):(uint256)",
      [ethereum.Value.fromAddress(_sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayerTapStamina(_sender: Address): BigInt {
    let result = super.call(
      "getPlayerTapStamina",
      "getPlayerTapStamina(address):(uint256)",
      [ethereum.Value.fromAddress(_sender)]
    );

    return result[0].toBigInt();
  }

  try_getPlayerTapStamina(_sender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPlayerTapStamina",
      "getPlayerTapStamina(address):(uint256)",
      [ethereum.Value.fromAddress(_sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSheepCount(): BigInt {
    let result = super.call("maxSheepCount", "maxSheepCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSheepCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSheepCount",
      "maxSheepCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxShipCount(): BigInt {
    let result = super.call("maxShipCount", "maxShipCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxShipCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxShipCount", "maxShipCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  playerShipCount(param0: Address): SheepUp__playerShipCountResult {
    let result = super.call(
      "playerShipCount",
      "playerShipCount(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SheepUp__playerShipCountResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_playerShipCount(
    param0: Address
  ): ethereum.CallResult<SheepUp__playerShipCountResult> {
    let result = super.tryCall(
      "playerShipCount",
      "playerShipCount(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SheepUp__playerShipCountResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  playerTapCount(param0: Address): SheepUp__playerTapCountResult {
    let result = super.call(
      "playerTapCount",
      "playerTapCount(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SheepUp__playerTapCountResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_playerTapCount(
    param0: Address
  ): ethereum.CallResult<SheepUp__playerTapCountResult> {
    let result = super.tryCall(
      "playerTapCount",
      "playerTapCount(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SheepUp__playerTapCountResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  point(param0: Address): BigInt {
    let result = super.call("point", "point(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_point(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("point", "point(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sheepStatus(param0: BigInt): SheepUp__sheepStatusResult {
    let result = super.call(
      "sheepStatus",
      "sheepStatus(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SheepUp__sheepStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_sheepStatus(
    param0: BigInt
  ): ethereum.CallResult<SheepUp__sheepStatusResult> {
    let result = super.tryCall(
      "sheepStatus",
      "sheepStatus(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SheepUp__sheepStatusResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toString();
  }

  try_uri(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class ShipCall extends ethereum.Call {
  get inputs(): ShipCall__Inputs {
    return new ShipCall__Inputs(this);
  }

  get outputs(): ShipCall__Outputs {
    return new ShipCall__Outputs(this);
  }
}

export class ShipCall__Inputs {
  _call: ShipCall;

  constructor(call: ShipCall) {
    this._call = call;
  }

  get _sheepId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ShipCall__Outputs {
  _call: ShipCall;

  constructor(call: ShipCall) {
    this._call = call;
  }
}

export class TapCall extends ethereum.Call {
  get inputs(): TapCall__Inputs {
    return new TapCall__Inputs(this);
  }

  get outputs(): TapCall__Outputs {
    return new TapCall__Outputs(this);
  }
}

export class TapCall__Inputs {
  _call: TapCall;

  constructor(call: TapCall) {
    this._call = call;
  }

  get _sheepId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TapCall__Outputs {
  _call: TapCall;

  constructor(call: TapCall) {
    this._call = call;
  }
}
